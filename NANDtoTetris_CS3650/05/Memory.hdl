// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	
	 Not(in = address[14], out = not14);
	 And(a = not14, b = load, out = loadRam);
     RAM16K(in = in, load = loadRam, address = address[0..13], out = outRam);

	And(a = address[14], b = load, out = outFirstAnd);
	Not(in = address[13], out = not13);
	And(a = outFirstAnd, b = not13, out = loadScreen);
	Screen(in = in, load = loadScreen, address = address[0..12], out = outScreen);

	Keyboard(out = outKeyBoard);

	Or(a = address[0], b = address[1], out = outOr1);
	Or(a = address[2], b = address[3], out = outOr2);
	Or(a = address[4], b = address[5], out = outOr3);
	Or(a = address[6], b = address[7], out = outOr4);
	Or(a = address[8], b = address[9], out = outOr5);
	Or(a = address[10], b = address[11], out = outOr6);
	Or(a = outOr1, b = outOr2, out = outOr7);
	Or(a = outOr3, b = outOr4, out = outOr8);
	Or(a = outOr5, b = outOr6, out = outOr9);
	Or(a = outOr9, b = address[12], out = outOr10);
	Or(a = outOr7, b = outOr8, out = outOr11);
	Or(a = outOr10, b = outOr11, out = outOr12);

	Not(in = outOr12, out = notOutOr12);
	And(a = address[13], b = address[14], out = and1);
	And(a = and1, b = notOutOr12, out = finSel);

	Mux16(a = outRam, b = outScreen, sel = address[14], out = outMux1);
	Mux16(a = outMux1, b = outKeyBoard, sel = finSel, out = out);
}