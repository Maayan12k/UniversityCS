// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	    

	Mux16(a = instruction, b = ALUOut, sel = instruction[15], out = Mux16BeforeA);
	Mux(a = true, b = instruction[5], sel = instruction[15],  out = loadRegA);
	ARegister(in = Mux16BeforeA, load = loadRegA, out = ARegOut);

	Mux(a = false, b = instruction[4], sel = instruction[15], out = loadRegD);
	DRegister(in = ALUOut, load = loadRegD, out = ALUInDReg);
	

	Mux(a = true, b = instruction[11], sel = instruction[15], out = zxM);
	Mux(a = false, b = instruction[10], sel = instruction[15], out = nxM);
	Mux(a = true, b = instruction[9], sel = instruction[15], out = zyM);
	Mux(a = false, b = instruction[8], sel = instruction[15], out = nyM);
	Mux(a = true, b = instruction[7], sel = instruction[15], out = fM);
	Mux(a = false, b = instruction[6], sel = instruction[15], out = noM);
	Mux16(a = ARegOut, b = inM, sel = instruction[12], out = ALUInDOrMReg);
	ALU(x = ALUInDReg, y = ALUInDOrMReg, zx = zxM, nx = nxM, zy = zyM, ny = nyM, f = fM, no = noM, out = ALUOut, zr = zrALUOut, ng = ngALUOut);

	Jumper(zr = zrALUOut, ng = ngALUOut, j1 = instruction[2], j2 = instruction[1], j3 = instruction[0], out = jumperOut);

	Mux(a = false, b = jumperOut, sel = instruction[15], out = loadPC);
	PC(in = ARegOut, reset = reset, load = loadPC, inc = true, out[0..14] = pc);
	

	Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM);

	Or16(a = false, b = ARegOut, out[0..14] = addressM);
	Or16(a = false, b = ALUOut, out = outM);



}